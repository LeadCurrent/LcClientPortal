// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250521145833_AddNewIdTOPingCache")]
    partial class AddNewIdTOPingCache
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Adminip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adminips");
                });

            modelBuilder.Entity("Data.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("CecCplA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CecIncludeA")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeB")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeC")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeD")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeE")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeF")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeG")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<int>("Offerid")
                        .HasColumnType("int");

                    b.Property<int>("Sourceid")
                        .HasColumnType("int");

                    b.Property<string>("Transferphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Offerid");

                    b.HasIndex("Sourceid");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("Data.Allocationcampus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Allocationid")
                        .HasColumnType("int");

                    b.Property<int>("Campusid")
                        .HasColumnType("int");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Allocationid");

                    b.ToTable("Allocationcampuses");
                });

            modelBuilder.Entity("Data.Allocationcampusdegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Allocationid")
                        .HasColumnType("int");

                    b.Property<int>("Campusdegreeid")
                        .HasColumnType("int");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Allocationid");

                    b.HasIndex("Campusdegreeid");

                    b.ToTable("Allocationcampusdegrees");
                });

            modelBuilder.Entity("Data.Apilog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logtext")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Apilogs");
                });

            modelBuilder.Entity("Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Data.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Campustype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clientid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PortalStatesid")
                        .HasColumnType("int");

                    b.Property<int?>("Postalcodeid")
                        .HasColumnType("int");

                    b.Property<int>("Schoolid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PortalStatesid");

                    b.HasIndex("Postalcodeid");

                    b.HasIndex("Schoolid");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Data.CampusIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CampusIdMap");
                });

            modelBuilder.Entity("Data.Campusdegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Campusid")
                        .HasColumnType("int");

                    b.Property<string>("Clientid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Degreeid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Degreeid");

                    b.ToTable("Campusdegrees");
                });

            modelBuilder.Entity("Data.Campuspostalcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Campusid")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Postalcodeid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Campusid");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Postalcodeid");

                    b.ToTable("Campuspostalcodes");
                });

            modelBuilder.Entity("Data.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Direct")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Data.ClientIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ClientIdMap");
                });

            modelBuilder.Entity("Data.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("APIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyTimeZone")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Data.CompanyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrimaryContact")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("CompanyContact");
                });

            modelBuilder.Entity("Data.CompanyEmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllStaffAccess")
                        .HasColumnType("bit");

                    b.Property<string>("CalendarColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSyncDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyEmailAccount");
                });

            modelBuilder.Entity("Data.CompanyFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllUserAccess")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ParentFolderId")
                        .HasColumnType("int");

                    b.Property<bool>("RestrictAccess")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFolder");
                });

            modelBuilder.Entity("Data.CompanyNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyNote");
                });

            modelBuilder.Entity("Data.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompanyAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyUser");
                });

            modelBuilder.Entity("Data.CompanyUserEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEmailAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailAccountId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("CompanyUserEmail");
                });

            modelBuilder.Entity("Data.CompanyUserNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("CompanyUserNote");
                });

            modelBuilder.Entity("Data.CompayUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("CompayUserRole");
                });

            modelBuilder.Entity("Data.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("Unsubscribed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Data.CustomerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerNote");
                });

            modelBuilder.Entity("Data.CustomerUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingZip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerUpload");
                });

            modelBuilder.Entity("Data.Degreeprogram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Levelid")
                        .HasColumnType("int");

                    b.Property<int>("Programid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Levelid");

                    b.HasIndex("Programid");

                    b.ToTable("Degreeprograms");
                });

            modelBuilder.Entity("Data.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyFolderId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanySubFolderId")
                        .HasColumnType("int");

                    b.Property<bool>("ControlDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentVersionNumber")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentFileType")
                        .HasColumnType("int");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IconType")
                        .HasColumnType("int");

                    b.Property<string>("LinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaFileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrimaryVideo")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyFolderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Data.DocumentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaFileURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentVersion");
                });

            modelBuilder.Entity("Data.DownSellOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Clientid")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formurl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FridayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FridayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeGreenCardHolders")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNoInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNonCitizens")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNonMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludePermanentResidents")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeUscitizens")
                        .HasColumnType("bit");

                    b.Property<int>("Maxage")
                        .HasColumnType("int");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<int>("Minage")
                        .HasColumnType("int");

                    b.Property<bool>("MondayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("SaturdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SundayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ThursdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Transferphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TuesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("WednesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednesdayEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednesdayStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DownSellOffers");
                });

            modelBuilder.Entity("Data.DownSellOfferPostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DownSellOfferId")
                        .HasColumnType("int");

                    b.Property<int>("Postalcodeid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DownSellOfferPostalCodes");
                });

            modelBuilder.Entity("Data.Eduapi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Clientid")
                        .HasColumnType("int");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Clientid");

                    b.ToTable("Eduapis");
                });

            modelBuilder.Entity("Data.Eduapitargeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CitizenIncludeGreenCardHolders")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeOther")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludePermanentResidents")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeUscitizens")
                        .HasColumnType("bit");

                    b.Property<int>("Eduapiid")
                        .HasColumnType("int");

                    b.Property<bool>("FridayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FridayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternetIncludeInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("InternetIncludeNoInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadIpAddressRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("MilitaryIncludeMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("MilitaryIncludeNonMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("MondayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SaturdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentMaxAge")
                        .HasColumnType("int");

                    b.Property<int>("StudentMaxHighSchoolGradYear")
                        .HasColumnType("int");

                    b.Property<int>("StudentMinAge")
                        .HasColumnType("int");

                    b.Property<int>("StudentMinHighSchoolGradYear")
                        .HasColumnType("int");

                    b.Property<bool>("SundayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ThursdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TuesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WednesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednesdayStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Eduapiid");

                    b.ToTable("Eduapitargetings");
                });

            modelBuilder.Entity("Data.EduspotsEduapiLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Eduapiid")
                        .HasColumnType("int");

                    b.Property<string>("Searchreturnid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EduspotsEduapiLogs");
                });

            modelBuilder.Entity("Data.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEmailAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DownloadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<string>("Importance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternetMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReplySent")
                        .HasColumnType("bit");

                    b.Property<string>("ReplySentBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReplySentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailAccountId");

                    b.ToTable("EmailMessage");
                });

            modelBuilder.Entity("Data.EmailNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEmailAccountId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailNotifications");
                });

            modelBuilder.Entity("Data.EmailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailMessageId");

                    b.ToTable("EmailRecipient");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Allocation.Models.AllocationsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AllocationsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Area.Models.AreasIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AreasIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Campus.Models.CampusdegreeIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CampusdegreeIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Campus.Models.CampuspostalcodesIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CampuspostalcodesIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Degreeprogram.Models.DegreeprogramsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DegreeprogramsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.DownSellOffer.Models.DownSellOfferPostalCodesIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DownSellOfferPostalCodesIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.DownSellOffer.Models.DownSellOffersIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DownSellOffersIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Group.Models.GroupIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("GroupIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Interest.Models.InterestsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InterestsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Leadpost.Models.LeadpostsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeadpostsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Level.Models.LevelsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LevelsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.MasterSchool.Models.Master_school_mappingsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Master_school_mappingsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.MasterSchool.Models.Master_schoolsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Master_schoolsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Offer.Models.OffertargetingIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("OffertargetingIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.PrepingLog.Models.Ping_cacheIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Ping_cacheIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Program.Models.ProgramareasIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProgramareasIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Program.Models.PrograminterestsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PrograminterestsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Program.Models.ProgramsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProgramsIdMap");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.School.Models.SchoolGroupsIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SchoolGroupsIdMap");
                });

            modelBuilder.Entity("Data.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("Data.Extrarequirededucation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Campusid")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Degreeid")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Extrarequirededucations");
                });

            modelBuilder.Entity("Data.FolderAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyFolderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyFolderId");

                    b.HasIndex("RoleId");

                    b.ToTable("FolderAccess");
                });

            modelBuilder.Entity("Data.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Data.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Data.Leadpost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Campusid")
                        .HasColumnType("int");

                    b.Property<string>("Campusname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clientname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Offerid")
                        .HasColumnType("int");

                    b.Property<string>("Offername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameterstring")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Programid")
                        .HasColumnType("int");

                    b.Property<string>("Programname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Schoolid")
                        .HasColumnType("int");

                    b.Property<string>("Serverresponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sourceid")
                        .HasColumnType("int");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<bool?>("Testflag")
                        .HasColumnType("bit");

                    b.Property<string>("Testparameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vamidentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Leadposts");
                });

            modelBuilder.Entity("Data.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Data.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Csfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exceptionmsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Innerexception")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Data.MasterSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MasterSchools");
                });

            modelBuilder.Entity("Data.MasterSchoolMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MasterSchoolsId")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MasterSchoolsId");

                    b.ToTable("MasterSchoolMappings");
                });

            modelBuilder.Entity("Data.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Archive")
                        .HasColumnType("bit");

                    b.Property<decimal>("CecRplA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecRplB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecRplC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecRplD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecRplE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecRplF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecRplG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Clientid")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lccampaignid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Militaryonly")
                        .HasColumnType("bit");

                    b.Property<bool>("Nomilitary")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Schoolid")
                        .HasColumnType("int");

                    b.Property<string>("Transferphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Clientid");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Schoolid");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Data.OfferIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("OfferIdMap");
                });

            modelBuilder.Entity("Data.Offertargeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CecCplA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CecIncludeA")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeB")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeC")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeD")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeE")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeF")
                        .HasColumnType("bit");

                    b.Property<bool>("CecIncludeG")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeGreenCardHolders")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeOther")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludePermanentResidents")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeUscitizens")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("FridayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FridayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternetIncludeInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("InternetIncludeNoInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadIpAddressRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("MilitaryIncludeMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("MilitaryIncludeNonMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("MondayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Offerid")
                        .HasColumnType("int");

                    b.Property<bool>("SaturdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentMaxAge")
                        .HasColumnType("int");

                    b.Property<int>("StudentMaxHighSchoolGradYear")
                        .HasColumnType("int");

                    b.Property<int>("StudentMinAge")
                        .HasColumnType("int");

                    b.Property<int>("StudentMinHighSchoolGradYear")
                        .HasColumnType("int");

                    b.Property<bool>("SundayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ThursdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TuesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WednesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Offerid");

                    b.ToTable("Offertargetings");
                });

            modelBuilder.Entity("Data.PingCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Allowed")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SourceId");

                    b.ToTable("PingCaches");
                });

            modelBuilder.Entity("Data.PortalStates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PortalStates");
                });

            modelBuilder.Entity("Data.Portalclick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agentemail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Clicked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Portalid")
                        .HasColumnType("int");

                    b.Property<int>("Sourceid")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Portalclicks");
                });

            modelBuilder.Entity("Data.Portaltargeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CitizenIncludeGreenCardHolders")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeOther")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludePermanentResidents")
                        .HasColumnType("bit");

                    b.Property<bool>("CitizenIncludeUscitizens")
                        .HasColumnType("bit");

                    b.Property<bool>("FridayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FridayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternetIncludeInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("InternetIncludeNoInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("LeadIpAddressRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("MilitaryIncludeMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("MilitaryIncludeNonMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("MondayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Portalid")
                        .HasColumnType("int");

                    b.Property<bool>("SaturdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentMaxAge")
                        .HasColumnType("int");

                    b.Property<int>("StudentMaxHighSchoolGradYear")
                        .HasColumnType("int");

                    b.Property<int>("StudentMinAge")
                        .HasColumnType("int");

                    b.Property<int>("StudentMinHighSchoolGradYear")
                        .HasColumnType("int");

                    b.Property<bool>("SundayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ThursdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TuesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WednesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednesdayStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Portalid");

                    b.ToTable("Portaltargetings");
                });

            modelBuilder.Entity("Data.PostalCodeIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("PostalCodeIdMap");
                });

            modelBuilder.Entity("Data.Postalcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stateid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Postalcodes");
                });

            modelBuilder.Entity("Data.PrepingLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrepingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrepingLogs");
                });

            modelBuilder.Entity("Data.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Copy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Data.Programarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Areaid")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Programid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Areaid");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Programid");

                    b.ToTable("Programareas");
                });

            modelBuilder.Entity("Data.Programinterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Interestid")
                        .HasColumnType("int");

                    b.Property<int>("Programid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Interestid");

                    b.HasIndex("Programid");

                    b.ToTable("Programinterests");
                });

            modelBuilder.Entity("Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Data.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<int>("JobAccess")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Data.Scholls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accreditation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Disclosure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo100")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Maxage")
                        .HasColumnType("int");

                    b.Property<int?>("Maxhs")
                        .HasColumnType("int");

                    b.Property<bool>("Militaryfriendly")
                        .HasColumnType("bit");

                    b.Property<int?>("Minage")
                        .HasColumnType("int");

                    b.Property<int?>("Minhs")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schoolgroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Scoreadjustment")
                        .HasColumnType("int");

                    b.Property<string>("Shortcopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Startdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Targeting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcpaText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Data.SchoolIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SchoolIdMap");
                });

            modelBuilder.Entity("Data.Schoolgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Groupid")
                        .HasColumnType("int");

                    b.Property<int>("Schoolid")
                        .HasColumnType("int");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Groupid");

                    b.HasIndex("Schoolid");

                    b.ToTable("Schoolgroups");
                });

            modelBuilder.Entity("Data.Schoolhighlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Schoolid")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Schoolid");

                    b.ToTable("Schoolhighlights");
                });

            modelBuilder.Entity("Data.Schoolstart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Schoolid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Schoolid");

                    b.ToTable("Schoolstarts");
                });

            modelBuilder.Entity("Data.Searchportal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Leads")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<bool>("Transfers")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Searchportals");
                });

            modelBuilder.Entity("Data.SendEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyEmailAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<int>("OriginalMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyEmailAccountId");

                    b.ToTable("SendEmail");
                });

            modelBuilder.Entity("Data.SendEmailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientType")
                        .HasColumnType("int");

                    b.Property<int>("SendEmailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SendEmailId");

                    b.ToTable("SendEmailRecipient");
                });

            modelBuilder.Entity("Data.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accesskey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Apikey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Lcsiteid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lcsourceid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("oldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Data.SourceIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SourceIdMap");
                });

            modelBuilder.Entity("Data.Sourceip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sourceid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Sourceid");

                    b.ToTable("Sourceips");
                });

            modelBuilder.Entity("Data.StaffGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("StaffGroup");
                });

            modelBuilder.Entity("Data.StaffGroupDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffGroupId");

                    b.ToTable("StaffGroupDivision");
                });

            modelBuilder.Entity("Data.StaffGroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("StaffGroupId");

                    b.ToTable("StaffGroupUser");
                });

            modelBuilder.Entity("Data.StaffNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("StaffNote");
                });

            modelBuilder.Entity("Data.StateIdMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("OldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("StateIdMap");
                });

            modelBuilder.Entity("Data.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agentconfidencelevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Offerid")
                        .HasColumnType("int");

                    b.Property<string>("Partnerid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postalcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sourceid")
                        .HasColumnType("int");

                    b.Property<string>("Userconfidencelevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Data.TblConfigEducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblConfigEducationLevels");
                });

            modelBuilder.Entity("Data.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackGroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CheckBox")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Currency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dropdown")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RadioSelect")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TextArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Data.TemplateMultiSelect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SampleDropdown")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateMultiSelect");
                });

            modelBuilder.Entity("Data.UnreadEmailSummaryView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllContacts")
                        .HasColumnType("int");

                    b.Property<int>("AllEmails")
                        .HasColumnType("int");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<int>("Customers")
                        .HasColumnType("int");

                    b.Property<int>("Leads")
                        .HasColumnType("int");

                    b.Property<int>("MyCompany")
                        .HasColumnType("int");

                    b.Property<int>("NonContacts")
                        .HasColumnType("int");

                    b.Property<int>("Notifications")
                        .HasColumnType("int");

                    b.Property<int>("Vendors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("UnreadEmailSummaryView");
                });

            modelBuilder.Entity("Data.UserEmailAutoDelete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEmailAccountId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEmailAutoDelete");
                });

            modelBuilder.Entity("Data.UserLoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Device")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory");
                });

            modelBuilder.Entity("Data.UserSignatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEmailAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSignatures");
                });

            modelBuilder.Entity("Data.VwAllSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Offerid")
                        .HasColumnType("int");

                    b.Property<int?>("Sourceid")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Submisiondate")
                        .HasColumnType("date");

                    b.Property<string>("Submissiontype")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VwAllSubmissions");
                });

            modelBuilder.Entity("Data.VwAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllocationActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("AllocationCpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AllocationId")
                        .HasColumnType("int");

                    b.Property<bool>("AllocationMcap")
                        .HasColumnType("bit");

                    b.Property<int>("AllocationMcapamt")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VwAllocations");
                });

            modelBuilder.Entity("Data.VwAllocationsApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllocationActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("AllocationCpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AllocationDailyCapAmt")
                        .HasColumnType("int");

                    b.Property<bool>("AllocationHasDailyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("AllocationHasMonthlyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("AllocationHasWeeklyCap")
                        .HasColumnType("bit");

                    b.Property<int>("AllocationId")
                        .HasColumnType("int");

                    b.Property<string>("AllocationIdenttifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AllocationMonthlyCapAmt")
                        .HasColumnType("int");

                    b.Property<int>("AllocationSourceId")
                        .HasColumnType("int");

                    b.Property<int>("AllocationWeeklyCapAmt")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<bool>("SourceActive")
                        .HasColumnType("bit");

                    b.Property<string>("SourceApikey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceOsAccesskey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VwAllocationsApis");
                });

            modelBuilder.Entity("Data.VwFullOfferDetailsApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllocationActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("AllocationCpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AllocationDailyCapAmt")
                        .HasColumnType("int");

                    b.Property<bool>("AllocationHasDailyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("AllocationHasMonthlyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("AllocationHasWeeklyCap")
                        .HasColumnType("bit");

                    b.Property<int>("AllocationId")
                        .HasColumnType("int");

                    b.Property<string>("AllocationIdenttifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AllocationMonthlyCapAmt")
                        .HasColumnType("int");

                    b.Property<int>("AllocationSourceId")
                        .HasColumnType("int");

                    b.Property<int>("AllocationWeeklyCapAmt")
                        .HasColumnType("int");

                    b.Property<bool>("ClientActive")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OfferActive")
                        .HasColumnType("bit");

                    b.Property<int>("OfferDailyCapAmt")
                        .HasColumnType("int");

                    b.Property<string>("OfferDeliveryIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferDeliveryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OfferHasDailyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("OfferHasMonthlyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("OfferHasWeeklyCap")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMaxHsgradyr")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMinAge")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMinHsgradyr")
                        .HasColumnType("int");

                    b.Property<int>("OfferMonthlyCapAmt")
                        .HasColumnType("int");

                    b.Property<string>("OfferName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OfferRpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferWeeklyCapAmt")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<bool>("SourceActive")
                        .HasColumnType("bit");

                    b.Property<string>("SourceApikey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceOsAccesskey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VwFullOfferDetailsApis");
                });

            modelBuilder.Entity("Data.VwOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VwOffers");
                });

            modelBuilder.Entity("Data.VwOffersApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ClientActive")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OfferActive")
                        .HasColumnType("bit");

                    b.Property<int>("OfferDailyCapAmt")
                        .HasColumnType("int");

                    b.Property<string>("OfferDeliveryIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferDeliveryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OfferHasDailyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("OfferHasMonthlyCap")
                        .HasColumnType("bit");

                    b.Property<bool>("OfferHasWeeklyCap")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMaxHsgradyr")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMinAge")
                        .HasColumnType("int");

                    b.Property<int?>("OfferMinHsgradyr")
                        .HasColumnType("int");

                    b.Property<int>("OfferMonthlyCapAmt")
                        .HasColumnType("int");

                    b.Property<string>("OfferName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OfferRpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferWeeklyCapAmt")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VwOffersApis");
                });

            modelBuilder.Entity("Data.VwPingsCacheDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accesskey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Allowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PingSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VwPingsCacheDetails");
                });

            modelBuilder.Entity("Data.VwSchoolGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Groupcopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Groupid")
                        .HasColumnType("int");

                    b.Property<string>("Groupname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Schoolid")
                        .HasColumnType("int");

                    b.Property<string>("Schoolname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VwSchoolGroups");
                });

            modelBuilder.Entity("Data.VwVendorAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accesskey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accreditation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Alert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllocationActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("CecCplA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CecCplF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Clientid")
                        .HasColumnType("int");

                    b.Property<decimal>("Cpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Dcap")
                        .HasColumnType("bit");

                    b.Property<int>("Dcapamt")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Disclosure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FridayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FridayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo100")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Maxage")
                        .HasColumnType("int");

                    b.Property<int?>("Maxhs")
                        .HasColumnType("int");

                    b.Property<bool>("Mcap")
                        .HasColumnType("bit");

                    b.Property<int>("Mcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("Militaryonly")
                        .HasColumnType("bit");

                    b.Property<int?>("Minage")
                        .HasColumnType("int");

                    b.Property<int?>("Minhs")
                        .HasColumnType("int");

                    b.Property<bool>("MondayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Nomilitary")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Offerid")
                        .HasColumnType("int");

                    b.Property<decimal>("OtCecCplA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtCecCplB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtCecCplC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtCecCplD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtCecCplE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtCecCplF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtCecCplG")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SaturdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Shortcopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SourceActive")
                        .HasColumnType("bit");

                    b.Property<int>("Sourceid")
                        .HasColumnType("int");

                    b.Property<bool>("SundayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Targeting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcpaText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ThursdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Transferphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TuesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wcap")
                        .HasColumnType("bit");

                    b.Property<int>("Wcapamt")
                        .HasColumnType("int");

                    b.Property<bool>("WednesdayActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednesdayStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VwVendorAllocations");
                });

            modelBuilder.Entity("Data.VxFulfillmentApiv1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllocationId")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ClientRpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LeadsDelivered")
                        .HasColumnType("int");

                    b.Property<int>("OfferDailyCap")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("OfferMonthlyCap")
                        .HasColumnType("int");

                    b.Property<bool>("OfferStatus")
                        .HasColumnType("bit");

                    b.Property<string>("OfferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferWeeklyCap")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VendorCpl")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorDailyCap")
                        .HasColumnType("int");

                    b.Property<int>("VendorMonthlyCap")
                        .HasColumnType("int");

                    b.Property<bool>("VendorStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VxFulfillmentApiv1s");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<bool>("Developer")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForgotPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileAuthorizationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PropertyOwner")
                        .HasColumnType("bit");

                    b.Property<int>("SelectedCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("SystemAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("TemporaryPassword")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Data.Allocation", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Offer", "Offer")
                        .WithMany("Allocations")
                        .HasForeignKey("Offerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Source", "Source")
                        .WithMany("Allocations")
                        .HasForeignKey("Sourceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Offer");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Data.Allocationcampus", b =>
                {
                    b.HasOne("Data.Allocation", "Allocation")
                        .WithMany("Allocationcampuses")
                        .HasForeignKey("Allocationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allocation");
                });

            modelBuilder.Entity("Data.Allocationcampusdegree", b =>
                {
                    b.HasOne("Data.Allocation", "Allocation")
                        .WithMany("Allocationcampusdegrees")
                        .HasForeignKey("Allocationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Campusdegree", "Campusdegree")
                        .WithMany("Allocationcampusdegrees")
                        .HasForeignKey("Campusdegreeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allocation");

                    b.Navigation("Campusdegree");
                });

            modelBuilder.Entity("Data.Area", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Campus", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.PortalStates", "PortalStates")
                        .WithMany("Campuses")
                        .HasForeignKey("PortalStatesid");

                    b.HasOne("Data.Postalcode", "Postalcode")
                        .WithMany("Campuses")
                        .HasForeignKey("Postalcodeid");

                    b.HasOne("Data.Scholls", "School")
                        .WithMany("Campuses")
                        .HasForeignKey("Schoolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PortalStates");

                    b.Navigation("Postalcode");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Data.CampusIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Campusdegree", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Degreeprogram", "Degree")
                        .WithMany("Campusdegrees")
                        .HasForeignKey("Degreeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("Data.Campuspostalcode", b =>
                {
                    b.HasOne("Data.Campus", "Campus")
                        .WithMany("Campuspostalcodes")
                        .HasForeignKey("Campusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Postalcode", "Postalcode")
                        .WithMany("Campuspostalcodes")
                        .HasForeignKey("Postalcodeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Company");

                    b.Navigation("Postalcode");
                });

            modelBuilder.Entity("Data.Client", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.ClientIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.CompanyContact", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Data.CompanyEmailAccount", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany("CompanyEmailAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.CompanyFolder", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.CompanyNote", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany("CompanyNotes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.CompanyUser", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.CompanyUserEmail", b =>
                {
                    b.HasOne("Data.CompanyEmailAccount", "CompanyEmailAccount")
                        .WithMany()
                        .HasForeignKey("CompanyEmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyEmailAccount");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Data.CompanyUserNote", b =>
                {
                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Data.CompayUserRole", b =>
                {
                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserRoles")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Customer", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.CustomerNote", b =>
                {
                    b.HasOne("Data.Customer", "Customer")
                        .WithMany("CustomerNotes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Data.Degreeprogram", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Level", "Level")
                        .WithMany("Degreeprograms")
                        .HasForeignKey("Levelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Program", "Program")
                        .WithMany("Degreeprograms")
                        .HasForeignKey("Programid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Level");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Document", b =>
                {
                    b.HasOne("Data.CompanyFolder", "CompanyFolder")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyFolderId");

                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Customer", "Customer")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Company");

                    b.Navigation("CompanyFolder");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Data.DocumentVersion", b =>
                {
                    b.HasOne("Data.Document", "Document")
                        .WithMany("DocumentVersions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Data.DownSellOffer", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.DownSellOfferPostalCode", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Eduapi", b =>
                {
                    b.HasOne("Data.Client", "Client")
                        .WithMany("Eduapis")
                        .HasForeignKey("Clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Data.Eduapitargeting", b =>
                {
                    b.HasOne("Data.Eduapi", "Eduapi")
                        .WithMany("Eduapitargetings")
                        .HasForeignKey("Eduapiid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eduapi");
                });

            modelBuilder.Entity("Data.EmailMessage", b =>
                {
                    b.HasOne("Data.CompanyEmailAccount", "CompanyEmailAccount")
                        .WithMany()
                        .HasForeignKey("CompanyEmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyEmailAccount");
                });

            modelBuilder.Entity("Data.EmailRecipient", b =>
                {
                    b.HasOne("Data.EmailMessage", "EmailMessage")
                        .WithMany("EmailRecipients")
                        .HasForeignKey("EmailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailMessage");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Allocation.Models.AllocationsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Area.Models.AreasIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Campus.Models.CampusdegreeIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Campus.Models.CampuspostalcodesIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Degreeprogram.Models.DegreeprogramsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.DownSellOffer.Models.DownSellOfferPostalCodesIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.DownSellOffer.Models.DownSellOffersIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Group.Models.GroupIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Interest.Models.InterestsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Leadpost.Models.LeadpostsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Level.Models.LevelsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.MasterSchool.Models.Master_school_mappingsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.MasterSchool.Models.Master_schoolsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Offer.Models.OffertargetingIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.PrepingLog.Models.Ping_cacheIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Program.Models.ProgramareasIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Program.Models.PrograminterestsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.Program.Models.ProgramsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.EntityModelsAndLibraries.School.Models.SchoolGroupsIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Extrarequirededucation", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.FolderAccess", b =>
                {
                    b.HasOne("Data.CompanyFolder", "CompanyFolder")
                        .WithMany("FolderAccesses")
                        .HasForeignKey("CompanyFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyFolder");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Group", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Interest", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Leadpost", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Level", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.MasterSchool", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.MasterSchoolMapping", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.MasterSchool", "MasterSchools")
                        .WithMany("MasterSchoolMappings")
                        .HasForeignKey("MasterSchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("MasterSchools");
                });

            modelBuilder.Entity("Data.Offer", b =>
                {
                    b.HasOne("Data.Client", "Client")
                        .WithMany("Offers")
                        .HasForeignKey("Clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Scholls", "School")
                        .WithMany("Offers")
                        .HasForeignKey("Schoolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Data.OfferIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Offertargeting", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Offer", "Offer")
                        .WithMany("Offertargetings")
                        .HasForeignKey("Offerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Data.PingCache", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Data.Portaltargeting", b =>
                {
                    b.HasOne("Data.Searchportal", "Portal")
                        .WithMany("Portaltargetings")
                        .HasForeignKey("Portalid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");
                });

            modelBuilder.Entity("Data.PostalCodeIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Program", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Programarea", b =>
                {
                    b.HasOne("Data.Area", "Area")
                        .WithMany("Programareas")
                        .HasForeignKey("Areaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Program", "Program")
                        .WithMany("Programareas")
                        .HasForeignKey("Programid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Company");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Programinterest", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Interest", "Interest")
                        .WithMany("Programinterests")
                        .HasForeignKey("Interestid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Program", "Program")
                        .WithMany("Programinterests")
                        .HasForeignKey("Programid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Interest");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Role", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.RolePermission", b =>
                {
                    b.HasOne("Data.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Scholls", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.SchoolIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Schoolgroup", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Data.Group", "Group")
                        .WithMany("Schoolgroups")
                        .HasForeignKey("Groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Scholls", "School")
                        .WithMany("Schoolgroups")
                        .HasForeignKey("Schoolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Group");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Data.Schoolhighlight", b =>
                {
                    b.HasOne("Data.Scholls", "School")
                        .WithMany("Schoolhighlights")
                        .HasForeignKey("Schoolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Data.Schoolstart", b =>
                {
                    b.HasOne("Data.Scholls", "School")
                        .WithMany("Schoolstarts")
                        .HasForeignKey("Schoolid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Data.SendEmail", b =>
                {
                    b.HasOne("Data.CompanyEmailAccount", "CompanyEmailAccount")
                        .WithMany()
                        .HasForeignKey("CompanyEmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyEmailAccount");
                });

            modelBuilder.Entity("Data.SendEmailRecipient", b =>
                {
                    b.HasOne("Data.SendEmail", "SendEmail")
                        .WithMany("SendEmailRecipients")
                        .HasForeignKey("SendEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SendEmail");
                });

            modelBuilder.Entity("Data.Source", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.SourceIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.Sourceip", b =>
                {
                    b.HasOne("Data.Source", "Source")
                        .WithMany("Sourceips")
                        .HasForeignKey("Sourceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Data.StaffGroup", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.StaffGroupDivision", b =>
                {
                    b.HasOne("Data.StaffGroup", "StaffGroup")
                        .WithMany("StaffGroupDivisions")
                        .HasForeignKey("StaffGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffGroup");
                });

            modelBuilder.Entity("Data.StaffGroupUser", b =>
                {
                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.StaffGroup", "StaffGroup")
                        .WithMany("StaffGroupUsers")
                        .HasForeignKey("StaffGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("StaffGroup");
                });

            modelBuilder.Entity("Data.StaffNote", b =>
                {
                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Data.StateIdMap", b =>
                {
                    b.HasOne("Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Data.TemplateMultiSelect", b =>
                {
                    b.HasOne("Data.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Data.UnreadEmailSummaryView", b =>
                {
                    b.HasOne("Data.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("Data.UserLoginHistory", b =>
                {
                    b.HasOne("Data.User", "User")
                        .WithMany("userLogin")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Allocation", b =>
                {
                    b.Navigation("Allocationcampusdegrees");

                    b.Navigation("Allocationcampuses");
                });

            modelBuilder.Entity("Data.Area", b =>
                {
                    b.Navigation("Programareas");
                });

            modelBuilder.Entity("Data.Campus", b =>
                {
                    b.Navigation("Campuspostalcodes");
                });

            modelBuilder.Entity("Data.Campusdegree", b =>
                {
                    b.Navigation("Allocationcampusdegrees");
                });

            modelBuilder.Entity("Data.Client", b =>
                {
                    b.Navigation("Eduapis");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Data.Company", b =>
                {
                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyEmailAccounts");

                    b.Navigation("CompanyNotes");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Data.CompanyFolder", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("FolderAccesses");
                });

            modelBuilder.Entity("Data.CompanyUser", b =>
                {
                    b.Navigation("CompanyUserRoles");
                });

            modelBuilder.Entity("Data.Customer", b =>
                {
                    b.Navigation("CustomerDocuments");

                    b.Navigation("CustomerNotes");
                });

            modelBuilder.Entity("Data.Degreeprogram", b =>
                {
                    b.Navigation("Campusdegrees");
                });

            modelBuilder.Entity("Data.Document", b =>
                {
                    b.Navigation("DocumentVersions");
                });

            modelBuilder.Entity("Data.Eduapi", b =>
                {
                    b.Navigation("Eduapitargetings");
                });

            modelBuilder.Entity("Data.EmailMessage", b =>
                {
                    b.Navigation("EmailRecipients");
                });

            modelBuilder.Entity("Data.Group", b =>
                {
                    b.Navigation("Schoolgroups");
                });

            modelBuilder.Entity("Data.Interest", b =>
                {
                    b.Navigation("Programinterests");
                });

            modelBuilder.Entity("Data.Level", b =>
                {
                    b.Navigation("Degreeprograms");
                });

            modelBuilder.Entity("Data.MasterSchool", b =>
                {
                    b.Navigation("MasterSchoolMappings");
                });

            modelBuilder.Entity("Data.Offer", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Offertargetings");
                });

            modelBuilder.Entity("Data.PortalStates", b =>
                {
                    b.Navigation("Campuses");
                });

            modelBuilder.Entity("Data.Postalcode", b =>
                {
                    b.Navigation("Campuses");

                    b.Navigation("Campuspostalcodes");
                });

            modelBuilder.Entity("Data.Program", b =>
                {
                    b.Navigation("Degreeprograms");

                    b.Navigation("Programareas");

                    b.Navigation("Programinterests");
                });

            modelBuilder.Entity("Data.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Data.Scholls", b =>
                {
                    b.Navigation("Campuses");

                    b.Navigation("Offers");

                    b.Navigation("Schoolgroups");

                    b.Navigation("Schoolhighlights");

                    b.Navigation("Schoolstarts");
                });

            modelBuilder.Entity("Data.Searchportal", b =>
                {
                    b.Navigation("Portaltargetings");
                });

            modelBuilder.Entity("Data.SendEmail", b =>
                {
                    b.Navigation("SendEmailRecipients");
                });

            modelBuilder.Entity("Data.Source", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Sourceips");
                });

            modelBuilder.Entity("Data.StaffGroup", b =>
                {
                    b.Navigation("StaffGroupDivisions");

                    b.Navigation("StaffGroupUsers");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("userLogin");
                });
#pragma warning restore 612, 618
        }
    }
}
