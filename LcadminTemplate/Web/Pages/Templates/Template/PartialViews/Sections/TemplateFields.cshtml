@using Data
@using Web
@model Web.TemplateVM
@using static Web.GeneralEnumDDLs

@Html.HiddenFor(x => x.BlockPostBack)
@Html.HiddenFor(x => x.Template.Image)
@Html.HiddenFor(x => x.Template.Image2)
<table>
    <tr>
        <td>
            <div class="formlabel">
                Name:
                <span id="Template_Name_Invalid" class="required">*</span>
            </div>
            @Html.TextBoxFor(m => m.Template.Name, new { @class = "requiredfield", onkeyup = "ValidateForm();" })
        </td>
        <td>
            <div class="formlabel">
                Number:
                <span id="Template_Number_Invalid" class="required">*</span>
            </div>
            @Html.TextBoxFor(m => m.Template.Number, new { @class = "requirednumeric width100", onclick = "if (this.value == '0') this.value = '';", onkeyup = "ValidateForm();", onchange = "ValidateForm();" })
        </td>
    </tr>
    <tr>
        <td>
            <div class="formlabel">
                Currency:
                <span id="Template_Currency_Invalid" class="required">*</span>
            </div>
            <div class="currency-input">
                <span class="currency-sign">$</span>
                @Html.TextBoxFor(m => m.Template.Currency, new { @class = "requireddecimal", onclick = "if (this.value == '0.00') this.value = '';", onkeyup = "ValidateForm();" } )
            </div>
        </td>
        <td>
            <div class="formlabel">
                Dropdown:
                <span id="Template_Dropdown_Invalid" class="required">*</span>
            </div>
            @Html.DropDownListFor(m => m.Template.Dropdown, SampleDDL(), new { @class = "requireddropdown", onchange = "ValidateForm();" })
        </td>
    </tr>
    <tr>
        <td>
            <div class="formlabel">
                Date:
                <span id="Date_Invalid" class="required">*</span>
            </div>
            @Html.HiddenFor(x => x.Template.Date, new { @class = "requiredfield" })
            <input class="requiredfield"
                   id="Date"
                   type="date"
                   value="@CommonClasses.StringFormating.DatePicker(Model.Template.Date)"
                   onchange="document.getElementById('Template_Date').value = document.getElementById('Date').value; ValidateForm();">
        </td>
        <td>
            <div class="formlabel">
                Time:
                <span id="Time_Invalid" class="required">*</span>
            </div>
            @Html.HiddenFor(x => x.Template.Time, new { @class = "requiredfield" })
            <input class="requiredfield"
                   id="Time"
                   type="time"
                   value="@Model.Template.TimeStr"
                   onchange="document.getElementById('Template_Time').value = document.getElementById('Time').value; ValidateForm();">
        </td>
    </tr>
    <tr>
        <td>
            <div class="formlabel formRadioGroup">
                Radio Select:
                <span id="Template_RadioSelect_Invalid" class="required">*</span>
                <div class="">
                    <div class="radioGroup">
                        <span>
                            @Html.RadioButtonFor(x => x.Template.RadioSelect, TemplateEnums.SampleDropdown.Item1, new { @class = "requiredradio", onchange = "ValidateForm();" }) Item 1<br>
                        </span>
                        <span>
                            @Html.RadioButtonFor(x => x.Template.RadioSelect, TemplateEnums.SampleDropdown.Item2, new { @class = "requiredradio", onchange = "ValidateForm();" }) Item 2<br>
                        </span>
                        <span>
                            @Html.RadioButtonFor(x => x.Template.RadioSelect, TemplateEnums.SampleDropdown.Item3, new { @class = "requiredradio", onchange = "ValidateForm();" }) Item 3
                        </span>
                    </div>
                </div>
            </div>
        </td>
        <td>
            <div class="formlabel">
                @Html.CheckBoxFor(m => m.Template.CheckBox, new { onclick = "ValidateForm();" })  Checkbox
            </div>
        </td>
    </tr>
    <tr>
        <td>
            <div class="formlabel">
                Phone:
                <span id="Template_Phone_Invalid" class="required">*</span>
            </div>
            @Html.TextBoxFor(m => m.Template.Phone, new { @class = "requiredphone", onkeyup = "ValidateForm();" })
        </td>

        <td>
            <div class="formlabel">
                Text Area:
                <span id="Template_TextArea_Invalid" class="required">*</span>
            </div>
            @Html.TextAreaFor(m => m.Template.TextArea, new { @class = "requiredfield", onkeyup = "ValidateForm();" })
        </td>
    </tr>
    @if (Model.Template.Id > 0)
    {
        <tr>
            <td>
                <div class="formlabel">
                    Image:
                </div>
                @if (Model.Template.Image != null)
                {
                    <div>
                        <div id="imageContainer">
                            <img src="@Model.Template.Image" style="width:150px; border: 1px solid black; cursor:pointer" onclick="viewimage(event,'@Model.Template.Image')" />
                        </div>
                        <div class="pt-2" id="editImageContainer">
                            <button class="gridbutton" onclick="BlockPost(); showPhotoEditSection()">Edit</button>
                        </div>
                    </div>

                    <div id="editImageSection" style="display: none;">
                        <div class="mt-2">
                            <input id="edituploadPhoto" type="file" name="uploadfile" style="display: none; color:black !important" />
                            <button id="editPhotoButton" style="display: none;" class="gridbutton" onclick="postBack(); Ajax('Update Photo')">Update</button>
                            <button id="cancelPhotoButton" style="display: none;" class="gridbutton" onclick="BlockPost(); showCancelPhotoInput();">Cancel</button>
                        </div>
                        <div class="mt-2">
                            <button id="retakePhotoButton" class="gridbutton" onclick="BlockPost(); showPhotoInput()">Retake Photo</button>
                            <button id="removePhotoButton" class="gridbutton" onclick="postBack(); Ajax('Remove Photo')">Remove</button>
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <button class="button" id="decline1" onclick=" BlockPost(); handleButtonClick('decline1', 'uploadfile1', 'acceptButton1');">
                            Take/Upload Picture
                        </button>
                        <input id="uploadfile1" type="file" name="uploadfile" style="display: none; color:black !important" />
                        <button id="acceptButton1" style="display: none;" class="button" onclick="postBack(); Ajax('Add Photo')">Add Photo</button>
                    </div>
                }
            </td>
            <td>
                <div class="formlabel">
                    Image With Note:
                </div>
                @if (Model.Template.Image2 != null)
                {
                    <div id="hideNote">
                        @Model.Template.Note
                    </div>
                    <div>
                        <div id="noteContainer" style="display: none;">
                            @Html.TextAreaFor(m => m.Template.Note, new { @class = "requiredfield", onkeyup = "ValidateForm();" })
                        </div>
                        <div id="image2Container">
                            <img src="@Model.Template.Image2" style="width:150px; border: 1px solid black; cursor:pointer" onclick="viewimage(event,'@Model.Template.Image')" />
                        </div>
                        <div class="pt-2" id="editCommentContainer">
                            <button class="gridbutton" onclick="BlockPost(); showEditSection()">Edit</button>
                        </div>
                    </div>

                    <div id="editSection" style="display: none;">
                        <div class="mt-2">
                            <input id="edituploadPhoto2" type="file" name="uploadfile" style="display: none; color:black !important" />
                            <button id="editPhoto2Button" style="display: none;" class="gridbutton" onclick="postBack(); Ajax('Update Photo2')">Update</button>
                            <button id="cancelPhoto2Button" style="display: none;" class="gridbutton" onclick="BlockPost(); showCancelPhoto2Input();">Cancel</button>
                        </div>
                        <div class="mt-2">
                            <button id="addPhotoButton" class="gridbutton" onclick="postBack(); Ajax('Update Note')">Update</button>
                            <button id="retakePhoto2Button" class="gridbutton" onclick="BlockPost(); showPhoto2Input()">Retake Photo</button>
                            <button id="removePhoto2Button" class="gridbutton" onclick="postBack(); Ajax('Remove Photo2')">Remove</button>
                        </div>
                    </div>
                }
                else
                {
                    <div id="noteContainer" style="display: none;">
                        @Html.TextAreaFor(m => m.Template.Note, new { @class = "requiredfield", onkeyup = "ValidateForm();" })
                    </div>
                    <div>
                        <button class="button" id="decline2" onclick=" BlockPost(); handleButtonClick('decline2', 'uploadfile2', 'acceptButton2', 'noteContainer');">
                            Take/Upload Picture
                        </button>
                        <input id="uploadfile2" type="file" name="uploadfile" style="display: none; color:black !important" />
                        <button id="acceptButton2" style="display: none;" class="button" onclick="postBack(); Ajax('Add Photo2')">Add Photo</button>
                    </div>
                }
            </td>
        </tr>
    }
    @if (Model.Template.Id != 0)
    {
        <tr>
            <td>
                <div class="formlabel">
                    Multi Select:
                </div>
                <div id="templateList" class="dropdown-check-list check-box-section" tabindex="100">
                    <span id="templateSpan" class="form-control anchor" onclick="OpenMultiSelectDropdown('templateList','templateGroupOptions')" style="font-size:smaller; overflow:auto"> </span>
                    <ul class="itm" id="templateGroupOptions">
                        @foreach (var item in SampleDDL().Where(x => int.TryParse(x.Value, out int val) && val > 0))
                        {
                            <li>
                                <span style="display:inline">
                                    <input name="SelectedTemplate" onclick="SelectMultiSelectItem('templateList');" type="checkbox" value="@item.Value"
                                    @(Model.AllSelectedTemplates != null && Model.AllSelectedTemplates.Any(x => x.SampleDropdown == int.Parse(item.Value)) ? "checked" : "") />
                                </span>
                                <span style="display:inline">
                                    @item.Text
                                </span>
                            </li>
                        }
                    </ul>
                </div>
                <script>
                    SelectMultiSelectItem('templateList');
                </script>
            </td>
            <td>
                <div class="formlabel">
                    Status:
                </div>
                <div>
                    @Html.DropDownListFor(m => m.Template.Status, StatusDDL())
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="formlabel">
                    Signature:
                </div>
                @if (Model.Template.Signature != null)
                {
                    <img src="@Model.Template.Signature" />
                    @Html.HiddenFor(m => m.Template.Signature)
                }
                else
                {
                    @Html.HiddenFor(m => m.Signature)
                    await Html.RenderPartialAsync("CaptureSignature.cshtml");
                }
            </td>
            <td>
                <div class="formlabel">
                    Background Color:
                </div>
                <div class="wdh">
                    <input name="backgroundcolorpicker" value="@Model.Template.BackGroundColor" id="backgroundcolor" type="color" onchange="newBackgroundColor(backgroundcolorpicker.value);">
                    @Html.HiddenFor(Model => Model.Template.BackGroundColor)
                </div>
            </td>
        </tr>
    }

</table>


@if (Model.UpdateSuccessful)
{
    <div class="success-message">
        Template updated successfully
    </div>
}
<div class="validation-message" id="Invalid">
    <i>Fill in all required fields</i>
</div>
<script>
    selectedDropdown('templateList');
</script>

<script>
    function handleButtonClick(declineId, uploadFileId, acceptButtonId) {
        document.getElementById(declineId).style.display = "none";
        document.getElementById(uploadFileId).style.display = "inline";
        document.getElementById(acceptButtonId).style.display = "inline";
    }

    function showPhotoEditSection() {
        document.getElementById("editImageContainer").style.display = "none";
        document.getElementById("imageContainer").style.display = "block";
        document.getElementById("editImageSection").style.display = "block";
    }

    function postBack() {
        document.getElementById('BlockPostBack').value = false;
    }
</script>

<script>
    function showPhotoInput() {
        // Hide the Retake Photo button
        document.getElementById("retakePhotoButton").style.display = "none";
        document.getElementById("removePhotoButton").style.display = "none";

        // Show the file input and Add Photo button
        document.getElementById("edituploadPhoto").style.display = "inline";
        document.getElementById("editPhotoButton").style.display = "inline";
        document.getElementById("cancelPhotoButton").style.display = "inline";
    }
</script>

<script>
    function showCancelPhotoInput() {
        

        document.getElementById("edituploadPhoto").style.display = "none";
        document.getElementById("editPhotoButton").style.display = "none";
        document.getElementById("cancelPhotoButton").style.display = "none";
        document.getElementById("retakePhotoButton").style.display = "inline";
        document.getElementById("removePhotoButton").style.display = "inline";
    }
</script>

<script>
    function newBackgroundColor(color) {
        document.getElementById('Template_BackGroundColor').value = color;
    }
</script>

<script>
    function handleButtonClick(declineId, uploadFileId, acceptButtonId, noteContainerId) {
        document.getElementById(declineId).style.display = "none";
        document.getElementById(uploadFileId).style.display = "inline";
        document.getElementById(acceptButtonId).style.display = "inline";

        if (noteContainerId) {
            document.getElementById(noteContainerId).style.display = "block";
        }
    }

    function showEditSection() {
        document.getElementById("editCommentContainer").style.display = "none";
        document.getElementById("hideNote").style.display = "none";
        document.getElementById("image2Container").style.display = "block";
        document.getElementById("noteContainer").style.display = "block";
        document.getElementById("editSection").style.display = "block";
    }

    function postBack() {
        document.getElementById('BlockPostBack').value = false;
    }
</script>

<script>
    function showPhoto2Input() {
        // Hide the Retake Photo button
        document.getElementById("retakePhoto2Button").style.display = "none";
        document.getElementById("addPhotoButton").style.display = "none";
        document.getElementById("removePhoto2Button").style.display = "none";

        // Show the file input and Add Photo button
        document.getElementById("edituploadPhoto2").style.display = "inline";
        document.getElementById("editPhoto2Button").style.display = "inline";
        document.getElementById("cancelPhoto2Button").style.display = "inline";
    }
</script>

<script>
    function showCancelPhoto2Input() {
        

        document.getElementById("edituploadPhoto2").style.display = "none";
        document.getElementById("editPhoto2Button").style.display = "none";
        document.getElementById("cancelPhoto2Button").style.display = "none";
        document.getElementById("retakePhoto2Button").style.display = "inline";
        document.getElementById("addPhotoButton").style.display = "inline";
        document.getElementById("removePhoto2Button").style.display = "inline";
    }
</script>

<script>
    function viewimage(event, URL) {

        var x = event.clientX - 400;
        if ((x + 800) > screen.width) {
            x = screen.width - 410;
        }

        document.getElementById("showimage").style.display = "inline";
        document.getElementById("popupimage").src = URL;
        document.getElementById("popup").style.left = x + 'px';
        document.getElementById("popup").style.top = event.clientY + window.pageYOffset - 300 + 'px';
    }
</script>

